// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metaservice.proto

package lnrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetInfo2Request struct {
	InfoResponse         *GetInfoResponse `protobuf:"bytes,1,opt,name=InfoResponse,proto3" json:"InfoResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetInfo2Request) Reset()         { *m = GetInfo2Request{} }
func (m *GetInfo2Request) String() string { return proto.CompactTextString(m) }
func (*GetInfo2Request) ProtoMessage()    {}
func (*GetInfo2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fb5294949b9545, []int{0}
}

func (m *GetInfo2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfo2Request.Unmarshal(m, b)
}
func (m *GetInfo2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfo2Request.Marshal(b, m, deterministic)
}
func (m *GetInfo2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo2Request.Merge(m, src)
}
func (m *GetInfo2Request) XXX_Size() int {
	return xxx_messageInfo_GetInfo2Request.Size(m)
}
func (m *GetInfo2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo2Request.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo2Request proto.InternalMessageInfo

func (m *GetInfo2Request) GetInfoResponse() *GetInfoResponse {
	if m != nil {
		return m.InfoResponse
	}
	return nil
}

type GetInfo2Response struct {
	Neutrino             *NeutrinoInfo    `protobuf:"bytes,1,opt,name=neutrino,proto3" json:"neutrino,omitempty"`
	Wallet               *WalletInfo      `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Lightning            *GetInfoResponse `protobuf:"bytes,3,opt,name=lightning,proto3" json:"lightning,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetInfo2Response) Reset()         { *m = GetInfo2Response{} }
func (m *GetInfo2Response) String() string { return proto.CompactTextString(m) }
func (*GetInfo2Response) ProtoMessage()    {}
func (*GetInfo2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fb5294949b9545, []int{1}
}

func (m *GetInfo2Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfo2Response.Unmarshal(m, b)
}
func (m *GetInfo2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfo2Response.Marshal(b, m, deterministic)
}
func (m *GetInfo2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo2Response.Merge(m, src)
}
func (m *GetInfo2Response) XXX_Size() int {
	return xxx_messageInfo_GetInfo2Response.Size(m)
}
func (m *GetInfo2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo2Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo2Response proto.InternalMessageInfo

func (m *GetInfo2Response) GetNeutrino() *NeutrinoInfo {
	if m != nil {
		return m.Neutrino
	}
	return nil
}

func (m *GetInfo2Response) GetWallet() *WalletInfo {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *GetInfo2Response) GetLightning() *GetInfoResponse {
	if m != nil {
		return m.Lightning
	}
	return nil
}

type ChangePasswordRequest struct {
	//
	//current_password should be the current valid passphrase used to unlock the
	//daemon. When using REST, this field must be encoded as base64.
	CurrentPassword []byte `protobuf:"bytes,1,opt,name=current_password,json=currentPassword,proto3" json:"current_password,omitempty"`
	// to support old pld created wallet we need to pass the pub password as well
	CurrentPubPassword []byte `protobuf:"bytes,2,opt,name=current_pub_password,json=currentPubPassword,proto3" json:"current_pub_password,omitempty"`
	//
	//new_password should be the new passphrase that will be needed to unlock the
	//daemon. When using REST, this field must be encoded as base64.
	NewPassword    []byte `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	NewPubPassword []byte `protobuf:"bytes,4,opt,name=new_pub_password,json=newPubPassword,proto3" json:"new_pub_password,omitempty"`
	//
	//stateless_init is an optional argument instructing the daemon NOT to create
	//any *.macaroon files in its filesystem. If this parameter is set, then the
	//admin macaroon returned in the response MUST be stored by the caller of the
	//RPC as otherwise all access to the daemon will be lost!
	StatelessInit bool `protobuf:"varint,5,opt,name=stateless_init,json=statelessInit,proto3" json:"stateless_init,omitempty"`
	//
	//new_macaroon_root_key is an optional argument instructing the daemon to
	//rotate the macaroon root key when set to true. This will invalidate all
	//previously generated macaroons.
	NewMacaroonRootKey   bool     `protobuf:"varint,6,opt,name=new_macaroon_root_key,json=newMacaroonRootKey,proto3" json:"new_macaroon_root_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordRequest) Reset()         { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()    {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fb5294949b9545, []int{2}
}

func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordRequest.Unmarshal(m, b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
}
func (m *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(m, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordRequest.Size(m)
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetCurrentPassword() []byte {
	if m != nil {
		return m.CurrentPassword
	}
	return nil
}

func (m *ChangePasswordRequest) GetCurrentPubPassword() []byte {
	if m != nil {
		return m.CurrentPubPassword
	}
	return nil
}

func (m *ChangePasswordRequest) GetNewPassword() []byte {
	if m != nil {
		return m.NewPassword
	}
	return nil
}

func (m *ChangePasswordRequest) GetNewPubPassword() []byte {
	if m != nil {
		return m.NewPubPassword
	}
	return nil
}

func (m *ChangePasswordRequest) GetStatelessInit() bool {
	if m != nil {
		return m.StatelessInit
	}
	return false
}

func (m *ChangePasswordRequest) GetNewMacaroonRootKey() bool {
	if m != nil {
		return m.NewMacaroonRootKey
	}
	return false
}

type ChangePasswordResponse struct {
	//
	//The binary serialized admin macaroon that can be used to access the daemon
	//after rotating the macaroon root key. If both the stateless_init and
	//new_macaroon_root_key parameter were set to true, this is the ONLY copy of
	//the macaroon that was created from the new root key and MUST be stored
	//safely by the caller. Otherwise a copy of this macaroon is also persisted on
	//disk by the daemon, together with other macaroon files.
	AdminMacaroon        []byte   `protobuf:"bytes,1,opt,name=admin_macaroon,json=adminMacaroon,proto3" json:"admin_macaroon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordResponse) Reset()         { *m = ChangePasswordResponse{} }
func (m *ChangePasswordResponse) String() string { return proto.CompactTextString(m) }
func (*ChangePasswordResponse) ProtoMessage()    {}
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3fb5294949b9545, []int{3}
}

func (m *ChangePasswordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordResponse.Unmarshal(m, b)
}
func (m *ChangePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordResponse.Marshal(b, m, deterministic)
}
func (m *ChangePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponse.Merge(m, src)
}
func (m *ChangePasswordResponse) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordResponse.Size(m)
}
func (m *ChangePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponse proto.InternalMessageInfo

func (m *ChangePasswordResponse) GetAdminMacaroon() []byte {
	if m != nil {
		return m.AdminMacaroon
	}
	return nil
}

func init() {
	proto.RegisterType((*GetInfo2Request)(nil), "lnrpc.GetInfo2Request")
	proto.RegisterType((*GetInfo2Response)(nil), "lnrpc.GetInfo2Response")
	proto.RegisterType((*ChangePasswordRequest)(nil), "lnrpc.ChangePasswordRequest")
	proto.RegisterType((*ChangePasswordResponse)(nil), "lnrpc.ChangePasswordResponse")
}

func init() { proto.RegisterFile("metaservice.proto", fileDescriptor_b3fb5294949b9545) }

var fileDescriptor_b3fb5294949b9545 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0xe5, 0x96, 0x46, 0xc9, 0x24, 0x4d, 0xd3, 0x85, 0x16, 0x2b, 0x02, 0xa9, 0x58, 0x54,
	0x4a, 0x0f, 0x24, 0x10, 0x38, 0xc1, 0x01, 0x09, 0x0e, 0xa8, 0x42, 0x41, 0xc8, 0x1c, 0x90, 0xb8,
	0x44, 0x1b, 0x67, 0x48, 0x56, 0x71, 0x66, 0xcd, 0xee, 0x18, 0xab, 0x8f, 0x82, 0xb8, 0xf2, 0xa0,
	0xc8, 0xeb, 0xb5, 0xd3, 0x96, 0x3f, 0x87, 0x48, 0x9b, 0xdf, 0x7c, 0xfb, 0x79, 0xbd, 0x33, 0x86,
	0xe3, 0x2d, 0xb2, 0xb4, 0x68, 0xbe, 0xab, 0x04, 0xc7, 0x99, 0xd1, 0xac, 0xc5, 0x41, 0x4a, 0x26,
	0x4b, 0x86, 0x9d, 0x6c, 0xc3, 0x55, 0x32, 0xec, 0x98, 0x2c, 0xa9, 0x96, 0xd1, 0x0c, 0x8e, 0xde,
	0x21, 0x5f, 0xd2, 0x57, 0x3d, 0x8d, 0xf1, 0x5b, 0x8e, 0x96, 0xc5, 0x4b, 0xe8, 0x95, 0xff, 0x63,
	0xb4, 0x99, 0x26, 0x8b, 0x61, 0x70, 0x16, 0x8c, 0xba, 0xd3, 0xd3, 0xb1, 0xd3, 0x8c, 0x3d, 0x5d,
	0x57, 0xe3, 0x1b, 0x6c, 0xf4, 0x2b, 0x80, 0xc1, 0xce, 0x57, 0x85, 0x62, 0x02, 0x6d, 0xc2, 0x9c,
	0x8d, 0x22, 0xed, 0x65, 0x77, 0xbd, 0xec, 0x83, 0x8f, 0x9d, 0xa3, 0x81, 0xc4, 0x05, 0xb4, 0x0a,
	0x99, 0xa6, 0xc8, 0xe1, 0x9e, 0xc3, 0x8f, 0x3d, 0xfe, 0xd9, 0x85, 0x0e, 0xf6, 0x80, 0x78, 0x01,
	0x9d, 0x54, 0xad, 0xd6, 0x4c, 0x8a, 0x56, 0xe1, 0xfe, 0x7f, 0x4f, 0xba, 0x03, 0xa3, 0x9f, 0x7b,
	0x70, 0xf2, 0x76, 0x2d, 0x69, 0x85, 0x1f, 0xa5, 0xb5, 0x85, 0x36, 0xcb, 0xfa, 0xe5, 0x2f, 0x60,
	0x90, 0xe4, 0xc6, 0x20, 0xf1, 0x3c, 0xf3, 0x25, 0x77, 0xe6, 0x5e, 0x7c, 0xe4, 0xf3, 0x7a, 0x87,
	0x78, 0x0a, 0xf7, 0x1a, 0x34, 0x5f, 0xec, 0xf0, 0x3d, 0x87, 0x8b, 0x1a, 0xcf, 0x17, 0xcd, 0x8e,
	0x47, 0xd0, 0x23, 0x2c, 0x76, 0xe4, 0xbe, 0x23, 0xbb, 0x84, 0x45, 0x83, 0x8c, 0x60, 0xe0, 0x90,
	0xeb, 0xc2, 0x3b, 0x0e, 0xeb, 0x97, 0xd8, 0x35, 0xd9, 0x39, 0xf4, 0x2d, 0x4b, 0xc6, 0x14, 0xad,
	0x9d, 0x2b, 0x52, 0x1c, 0x1e, 0x9c, 0x05, 0xa3, 0x76, 0x7c, 0xd8, 0xa4, 0x97, 0xa4, 0x58, 0x3c,
	0x83, 0x93, 0x52, 0xb8, 0x95, 0x89, 0x34, 0x5a, 0xd3, 0xdc, 0x68, 0xcd, 0xf3, 0x0d, 0x5e, 0x85,
	0x2d, 0x47, 0x0b, 0xc2, 0x62, 0xe6, 0x6b, 0xb1, 0xd6, 0xfc, 0x1e, 0xaf, 0xa2, 0xd7, 0x70, 0x7a,
	0xfb, 0x72, 0x7c, 0x27, 0xcf, 0xa1, 0x2f, 0x97, 0x5b, 0x45, 0x8d, 0xce, 0xdf, 0xcd, 0xa1, 0x4b,
	0x6b, 0xcf, 0xf4, 0x47, 0x00, 0xdd, 0x19, 0xb2, 0xfc, 0x54, 0xcd, 0xa1, 0x78, 0x05, 0xed, 0x7a,
	0x28, 0xc4, 0xad, 0xee, 0xd4, 0x53, 0x37, 0xbc, 0xff, 0x47, 0xee, 0x9f, 0x39, 0x83, 0xfe, 0xcd,
	0xd3, 0x88, 0x07, 0x1e, 0xfd, 0x6b, 0x07, 0x87, 0x0f, 0xff, 0x51, 0xad, 0x74, 0x6f, 0x1e, 0x7f,
	0x89, 0x56, 0x8a, 0xd7, 0xf9, 0x62, 0x9c, 0xe8, 0xed, 0x24, 0xdb, 0xf0, 0x93, 0x44, 0xda, 0x75,
	0xb9, 0x58, 0x4e, 0x52, 0x2a, 0x7f, 0x26, 0x4b, 0x16, 0x2d, 0xf7, 0x75, 0x3c, 0xff, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0x56, 0xd4, 0xa8, 0x4f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetaServiceClient interface {
	GetInfo2(ctx context.Context, in *GetInfo2Request, opts ...grpc.CallOption) (*GetInfo2Response, error)
	// lncli: `changepassword`
	//ChangePassword changes the password of the encrypted wallet. This will
	//automatically unlock the wallet database if successful.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
}

type metaServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetaServiceClient(cc *grpc.ClientConn) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) GetInfo2(ctx context.Context, in *GetInfo2Request, opts ...grpc.CallOption) (*GetInfo2Response, error) {
	out := new(GetInfo2Response)
	err := c.cc.Invoke(ctx, "/lnrpc.MetaService/GetInfo2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/lnrpc.MetaService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
type MetaServiceServer interface {
	GetInfo2(context.Context, *GetInfo2Request) (*GetInfo2Response, error)
	// lncli: `changepassword`
	//ChangePassword changes the password of the encrypted wallet. This will
	//automatically unlock the wallet database if successful.
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
}

// UnimplementedMetaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetaServiceServer struct {
}

func (*UnimplementedMetaServiceServer) GetInfo2(ctx context.Context, req *GetInfo2Request) (*GetInfo2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo2 not implemented")
}
func (*UnimplementedMetaServiceServer) ChangePassword(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}

func RegisterMetaServiceServer(s *grpc.Server, srv MetaServiceServer) {
	s.RegisterService(&_MetaService_serviceDesc, srv)
}

func _MetaService_GetInfo2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfo2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetInfo2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lnrpc.MetaService/GetInfo2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetInfo2(ctx, req.(*GetInfo2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lnrpc.MetaService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lnrpc.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo2",
			Handler:    _MetaService_GetInfo2_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MetaService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metaservice.proto",
}
